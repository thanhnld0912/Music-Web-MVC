@{
    Layout = null;
    ViewData["Title"] = "Song Page";
    var isAuthenticated = false;
    var userId = "";
    var userPlaylists = ViewData["UserPlaylists"] as List<Object> ?? new List<Object>();
    Console.WriteLine(userPlaylists);

    var hasPlaylists = userPlaylists != null && userPlaylists.Any();

    try
    {
        userId = Context?.Session?.GetString("UserId");
        isAuthenticated = !string.IsNullOrEmpty(userId);

    }
    catch (Exception ex)
    {
        Console.WriteLine($"Lỗi lấy session: {ex.Message}");
    }

}

<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] Music Player</title>
    <link rel="stylesheet" href="~/css/songpage.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Baloo+Bhaijaan+2&display=swap" rel="stylesheet">
</head>

<body>
    <div class="main-content">
        <input id="current-user-id" value="@userId" hidden></input>
        <input id="post-id" value="@Model.Id" hidden></input>
        <input id="song-id" value="@ViewData["SongId"]" hidden></input>
        <input id="user-playlists-data" value='@Json.Serialize(userPlaylists)' hidden>

        <!-- Notification Container will be created dynamically in JavaScript -->

            @await Component.InvokeAsync("Navbar")
  
        <div class="container">
            <!-- Music Player -->
            <div class="music-player">
                <div class="player-header">
                    <div class="player-info">
                        <div class="thumbnail">
                            <i class="fas fa-play"></i>
                        </div>
                        <div class="song-details">
                            <h1 class="song-title">@ViewData["SongTitle"]</h1>
                            <h2 class="artist-name">@ViewData["ArtistName"]</h2>
                            <input name="artist-id" value="@ViewData["ArtistId"]" hidden />
                        </div>
                    </div>
                </div>

                <div class="player-button">
                    <div class="control-buttons">
                        <button class="prev-btn"><i class="fas fa-step-backward"></i></button>
                        <div class="play-button" id="play-button"><i class="fas fa-play" id="play-icon"></i></div>
                        <button class="next-btn"><i class="fas fa-step-forward"></i></button>
                        <button class="repeat-btn"><i class="fas fa-redo"></i></button>
                    </div>
                    <div class="progress-song" id="progress-container">
                        <div class="time-display">0:00</div>
                        <div class="progress-song-bar" id="progress-bar">
                            <div class="progress" id="progress"></div>
                        </div>
                        <div class="duration">0:00</div>
                    </div>
                    <div class="volume-control">
                        <button class="volume-btn" onclick="toggleMute()"><i class="fas fa-volume-down" id="volume-icon"></i></button>
                        <input type="range" min="0" max="1" step="0.1" value="1" class="volume-slider" id="volume-slider" oninput="changeVolume(this.value)">
                    </div>
                    <audio id="audio-player" style="display: none;">
                        <source src="@ViewData["SongFileUrl"]" type="audio/mpeg">
                    </audio>
                </div>
            </div>

            <!-- Comment Section -->
            <div class="comment-section">
                <div class="comment-input">
                    <div class="user-icon">M</div>
                    <input type="text" placeholder="Write a comment" id="comment-input">
                    <button class="send-btn" onclick="submitComment(event)"><i class="fas fa-paper-plane"></i></button>
                </div>
                @{
                    bool userLiked = (bool)@ViewData["UserLiked"];
                }
                <div class="action-buttons">
                    <button class="like-btn @(userLiked ? "active" : "")" onclick="toggleLike(this)">
                        <i class="fas fa-heart"></i>
                        <span id="like-count">@ViewData["LikeCount"]</span>
                    </button>
                    <button class="copy-link-btn" onclick="copyLink()">
                        <i class="fas fa-link"></i>
                        <span>COPY LINK</span>
                    </button>
                    <button class="add-playlist-btn" id="openPlaylistModal" onclick="openPlaylistModal()">
                        <i class="fas fa-plus"></i>
                        <span>ADD TO PLAYLIST</span>
                    </button>
                </div>


                <div class="comment-follow">
                    <!-- Comments Container with split layout -->
                    <div class="comments-container">
                        <div class="comments-section" id="comments-section">
                            @foreach (var comment in Model.Comments)
{
    <div class="comment" data-comment-id="@comment.Id">
        <div class="left-comment-user">
            <div class="user-icon-commentcontent">@(comment.User?.Username[0] ?? 'A')</div>
        </div>

        <div class="comment-user">
            <div class="comment-username">
                <p>@(comment.User?.Username)</p>
            </div>
            <div class="comment-content">
                <p>@comment.Content</p>
                <div class="comment-meta">
                    <span class="comment-time">@comment.CreatedAt.ToString("HH:mm dd/MM/yyyy")</span>
                    
                    <!-- Check if comment belongs to current user -->
                                                @if (comment.UserId == int.Parse(userId))
                    {
                        <div class="comment-actions">
                                                        <span class="edit-comment" onclick="showEditCommentForm(@comment.Id)">Edit</span>
                                                        <span class="delete-comment" onclick="confirmDeleteComment(@comment.Id)">Delete</span>
                        </div>
                                                    <div class="comment-edit-form" id="edit-form-@comment.Id" style="display: none;">
                                                        <textarea class="edit-comment-textarea">@comment.Content</textarea>
                                                        <div class="edit-comment-buttons">
                                                            <button class="cancel-edit-btn" onclick="cancelEditComment(@comment.Id)">Cancel</button>
                                                            <button class="save-edit-btn" onclick="saveCommentEdit(@comment.Id)">Save</button>
                                                        </div>
                                                    </div>
                    }
                    else
                    {
                        <div class="comment-actions">
                                                        <span class="report-comment" onclick="showReportCommentForm(@comment.Id)">Report</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
                        </div>
                    </div>

                    <!-- Right Side: Artist Profile -->
                    <div class="artist-profile">
                        <div class="artist-avatar">
                            <img src="@ViewData["avatarUrl"]" alt="Artist Avatar">
                        </div>
                        <div class="artist-info">
                            <input class="artist-id" type="text" hidden data-artist-id="@ViewData["ArtistId"]" />
                            <h3>@ViewData["ArtistName"]</h3>
                            <p>Official Artist</p>
                            <p>Follower : @ViewData["FollowerCount"]</p>
                            @{
                                var isFollowing = ViewBag.IsFollowing ?? false;
                                var artistId = ViewData["ArtistId"]?.ToString();
                                var isSelfProfile = !string.IsNullOrEmpty(userId) && !string.IsNullOrEmpty(artistId) && userId == artistId;
                            }
                            @if (isAuthenticated && !isSelfProfile)
                            {
                                <button class="follow-btn @(isFollowing ? "followed" : "")" onclick="toggleFollow()">
                                    @(isFollowing ? "Followed ✓" : "Follow")
                                </button>
                            }
                            else if (isSelfProfile)
                            {
                                <button class="follow-btn disabled" disabled>This is You</button>
                            }
                        </div>
                    </div>

                </div>

            </div>

           
            <!-- Add playlist modal -->
            <div id="playlistModal" class="modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Add to Playlist</h3>
                        <span class="close-modal" onclick="closeModal('playlistModal')">&times;</span>
                    </div>
                    <div class="modal-body">
                        <div class="playlist-list" id="playlist-container">

                            @if (hasPlaylists)
                            {
                                @foreach (dynamic playlist in userPlaylists)
                                {
                                    <div class="playlist-item">
                                        <div class="playlist-icon">🎵</div>
                                        <div class="playlist-name">
                                            @(((dynamic)playlist).name)
                                        </div>
                                        <button class="add-to-playlist-btn" onclick="addSongToPlaylist(@(((dynamic)playlist).id))">
                                            Add
                                        </button>
                                    </div>
                                }
                            }
                            else
                            {
                                <p id="no-playlists-message">
                                    You don't have any playlists yet. Create one below.
                                </p>
                            }
                        </div>

                        <div class="create-playlist">
                            <input type="text" placeholder="Create new playlist" id="new-playlist-name">
                            <button class="create-playlist-btn" onclick="createPlaylist()">Create</button>
                        </div>
                    </div>
                </div>
            </div>


        </div>



        @await Component.InvokeAsync("GlobalPlayer")
        <script src="/js/SongPage.js"></script>
        <script src="~/js/globalplayer.js"></script>

        <!-- Additional CSS for button styling -->

</body>
</html>
